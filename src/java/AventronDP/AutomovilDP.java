/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package AventronDP;import AventronMD.AutomovilMD;import java.sql.Blob;import java.sql.SQLException;import java.util.ArrayList;import java.util.Date;import java.util.LinkedList;import java.util.List;import javax.inject.Named;import javax.enterprise.context.RequestScoped;import javax.faces.event.ValueChangeEvent;import javax.faces.model.SelectItem;import javax.naming.NamingException;/** * * @author dagom */@Named(value = "automovilDP")@RequestScopedpublic class AutomovilDP {    private String autoPlaca;    private String usuarioCI;    private Date autoAnio;    private int autoAsientosMaximos;    private Blob autoImagen;    private LinkedList<AutomovilDP> vecinos;    /**     *     * Creates a new instance of AutomovilDP     *     */    public AutomovilDP() {        //this.vecinos = this.cargarAutomoviles();    }    public AutomovilDP(String autoPlaca, String usuarioCI, Date autoAnio, int autoAsientosMaximos, Blob autoImagen) {        this.autoPlaca = autoPlaca;        this.usuarioCI = usuarioCI;        this.autoAnio = autoAnio;        this.autoAsientosMaximos = autoAsientosMaximos;        this.autoImagen = autoImagen;        this.vecinos = null;    }    public String getAutoPlaca() {        return autoPlaca;    }    public Date getAutoAnio() {        return autoAnio;    }    public int getAutoAsientosMaximos() {        return autoAsientosMaximos;    }    public Blob getAutoImagen() {        return autoImagen;    }    public String getUsuarioCI() {        return usuarioCI;    }    public List<AutomovilDP> getVecinos() {        return vecinos;    }    public void setAutoPlaca(String autoPlaca) {        this.autoPlaca = autoPlaca;    }    public void setAutoAnio(Date autoAnio) {        this.autoAnio = autoAnio;    }    public void setAutoAsientosMaximos(int autoAsientosMaximos) {        this.autoAsientosMaximos = autoAsientosMaximos;    }    public void setAutoImagen(Blob autoImagen) {        this.autoImagen = autoImagen;    }    public void setUsuarioCI(String usuarioCI) {        this.usuarioCI = usuarioCI;    }    public void setVecinos(LinkedList<AutomovilDP> vecinos) {        this.vecinos = vecinos;    }    public void guardarAutomovil(String ci) {        this.usuarioCI = ci;        AutomovilMD controlMD = new AutomovilMD(this);        if (controlMD.validarAutomovil()) {            controlMD.insertarAutomovil();        }    }    public void modificarAutomovil(String ci) {        this.usuarioCI = ci;        AutomovilMD controlMD = new AutomovilMD(this);        if (controlMD.validarAutomovil()) {            controlMD.actualizarAutomovil();        }    }    public void cargarAutomovil() {        AutomovilMD controlMD = new AutomovilMD(this);        AutomovilDP sera = controlMD.recuperarAutomovil();        this.autoPlaca = sera.autoPlaca;        this.usuarioCI = sera.usuarioCI;        this.autoAnio = sera.autoAnio;        this.autoAsientosMaximos = sera.autoAsientosMaximos;        this.autoImagen = sera.autoImagen;    }    public LinkedList<AutomovilDP> cargarAutomoviles() {        AutomovilMD controlMD = new AutomovilMD(this);        return controlMD.recuperarAutomoviles(this);    }    public void descartarAutomovil(String ci) {        this.usuarioCI = ci;        AutomovilMD controlMD = new AutomovilMD(this);        controlMD.eliminarAutomovil();    }    public boolean verificarAutomovil() {        AutomovilMD controlMD = new AutomovilMD(this);        return controlMD.validarAutomovil();    }    public LinkedList<AutomovilDP> listarVecinos(String ci) {        this.usuarioCI = ci;        this.vecinos = this.cargarAutomoviles();        List<AutomovilDP> nueva = this.vecinos;        return this.vecinos;    }    public AutomovilDP obtenerPlazas(AutomovilDP auto) {        AutomovilMD busqueda = new AutomovilMD(auto);        auto = busqueda.ConsultaporParametros1(auto);        return auto;    }    public void validar1(ValueChangeEvent event) throws NamingException, SQLException {        Object valor = event.getNewValue();        if (valor != null) {            AutomovilMD nuevo = new AutomovilMD(this);            AutomovilDP nueva = new AutomovilDP();            nueva = nuevo.ConsultaporParametros2(valor.toString());            if (nueva != null) {                this.setAutoPlaca(nueva.getAutoPlaca());                this.setUsuarioCI(nueva.getUsuarioCI());                this.setAutoAnio(nueva.getAutoAnio());                this.setAutoAsientosMaximos(nueva.getAutoAsientosMaximos());                this.setAutoImagen(nueva.getAutoImagen());                this.setValidar(true);                return;            }        }        setValidar(false);    }    private boolean validar;    public boolean isValidar() {        return validar;    }    public void setValidar(boolean validar) {        this.validar = validar;    }    public List<SelectItem> RetornarPlacasU(String CIU) throws NamingException, SQLException {        ArrayList<SelectItem> retorno = new ArrayList<SelectItem>();        AutomovilMD nuevo = new AutomovilMD(this);        List<AutomovilDP> autos = nuevo.consultaPorUsuario(CIU);        for (int i = 0; i < autos.size(); i++) {            retorno.add(new SelectItem(autos.get(i).getAutoPlaca()));        }        return retorno;    }}